name: Build, Push & Deploy UnityOrbisBridge

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-prx:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Checkout oosdk_libraries
      uses: actions/checkout@v4
      with:
        repository: bucanero/oosdk_libraries
        path: oosdk_libraries

    - name: Checkout libjbc
      uses: actions/checkout@v4
      with:
        repository: bucanero/ps4-libjbc
        path: ps4-libjbc

    - name: Install Dependencies
      run: |
        echo "Installing dependencies"
        sudo apt-get update
        sudo apt-get install -y \
        build-essential \
        jq \
        unzip \
        make \
        curl \
        git \
        cmake \
        pkg-config \
        zlib1g-dev \
        libssl-dev \
        xz-utils \

    - name: Set Environment Variables
      run: |
        echo "Setting up environment variables"
        echo "OO_PS4_TOOLCHAIN=${{ github.workspace }}/OpenOrbis/PS4Toolchain" >> $GITHUB_ENV
        echo "POLARSSL_INCLUDE_DIRS=${OO_PS4_TOOLCHAIN}/include" >> $GITHUB_ENV
        echo "POLARSSL_LIBRARY=${OO_PS4_TOOLCHAIN}/lib/libpolarssl.a" >> $GITHUB_ENV

    - name: Cache LLVM and Clang
      id: cache-llvm
      uses: actions/cache@v4
      with:
        path: ./llvm
        key: llvm-12.0
        restore-keys: |
          llvm-

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: 12.0
        cached: ${{ steps.cache-llvm.outputs.cache-hit }}

    - name: Cache OpenOrbis Toolchain
      id: cache-toolchain
      uses: actions/cache@v4
      with:
        path: ./OpenOrbis/PS4Toolchain
        key: toolchain-${{ runner.os }}-llvm-12.0
        restore-keys: |
          toolchain-${{ runner.os }}-llvm-12.0

    - name: Download OpenOrbis Toolchain
      run: |
        if [ ! -d "$OO_PS4_TOOLCHAIN" ]; then
          echo "Downloading Latest OpenOrbis Toolchain..."
          GITHUB_OWNER="OpenOrbis"
          GITHUB_REPO="OpenOrbis-PS4-Toolchain"
          WORKFLOW_FILE="toolchain.yml"
          ARTIFACT_NAME="toolchain-llvm-12"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"

          LATEST_RUN_URL="https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO/actions/workflows/$WORKFLOW_FILE/runs?per_page=10&status=completed"
          LATEST_RUN_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$LATEST_RUN_URL" | jq -r '.workflow_runs[] | select(.head_repository.owner.login == "OpenOrbis") | .id' | head -1)

          if [ -z "$LATEST_RUN_ID" ]; then
            echo "No workflow runs found for $WORKFLOW_FILE."
            exit 1
          fi

          ARTIFACTS_URL="https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO/actions/runs/$LATEST_RUN_ID/artifacts"
          ARTIFACT_DOWNLOAD_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$ARTIFACTS_URL" | jq -r --arg ARTIFACT_NAME "$ARTIFACT_NAME" '.artifacts[] | select(.name == $ARTIFACT_NAME) | .archive_download_url')

          if [ -z "$ARTIFACT_DOWNLOAD_URL" ]; then
            echo "No artifact named '$ARTIFACT_NAME' found in the latest workflow run."
            exit 1
          fi

          curl -L -o "$ARTIFACT_NAME.zip" -H "Authorization: token $GITHUB_TOKEN" "$ARTIFACT_DOWNLOAD_URL"
          unzip -o "$ARTIFACT_NAME.zip"
          TAR_FILE="$ARTIFACT_NAME.tar.gz"
          [ -f "$TAR_FILE" ] && tar -xzf "$TAR_FILE"
          rm -f "$ARTIFACT_NAME.zip" "$TAR_FILE"
        else
          echo "OpenOrbis Toolchain found in cache, skipping download."
        fi

    - name: Copy build_rules.mk
      if: steps.cache-toolchain.outputs.cache-hit != 'true'
      run: |
        echo "Copying build_rules.mk to the toolchain directory..."
        cp ${GITHUB_WORKSPACE}/.github/workflows/build_rules.mk ${OO_PS4_TOOLCHAIN}/

    - name: Install oosdk_libraries
      if: steps.cache-toolchain.outputs.cache-hit != 'true'
      run: |
        echo "Installing libraries..."
        cd oosdk_libraries/zlib_partial
        make install

        cd ../polarssl-1.3.9
        make install

        cd ../../oosdk_libraries/curl-7.64.1
        mkdir -p orbis && cd orbis
        wget https://raw.githubusercontent.com/bucanero/SDL-PS4/ps4/cmake/openorbis.cmake
        cmake --toolchain openorbis.cmake .. -DCMAKE_USE_POLARSSL=1 -DUSE_UNIX_SOCKETS=0 -DENABLE_THREADED_RESOLVER=0 -DENABLE_IPV6=0
        make libcurl
        cp lib/libcurl.a "${OO_PS4_TOOLCHAIN}/lib"
        cp -R ../include/curl "${OO_PS4_TOOLCHAIN}/include/"

    - name: Install libjbc
      if: steps.cache-toolchain.outputs.cache-hit != 'true'
      run: |
        echo "Installing libjbc..."
        cd ps4-libjbc
        make install

    - name: Build Project
      run: |
        echo "Building UnityOrbisBridge..."
        cd source/plugin
        make
        echo "Build completed!"

    - name: Upload PRX as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: UnityOrbisBridge-PRX
        path: source/plugin/UnityOrbisBridge.prx

  build-dll:
    runs-on: windows-latest
    needs: build-prx

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Check for Visual Studio Build Tools
      id: check-vsbuildtools
      run: |
        $vsPath = & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.Component.MSBuild -property installationPath
        if ($vsPath) { echo "VSBuildToolsFound=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 }

    - name: Cache Visual Studio Build Tools
      id: cache-vsbuildtools
      uses: actions/cache@v4
      with:
        path: C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools
        key: windows-vsbuildtools-16.11.5
        restore-keys: |
          windows-vsbuildtools-16.11

    - name: Install Visual Studio Build Tools
      if: steps.check-vsbuildtools.outputs.VSBuildToolsFound != 'true' && steps.cache-vsbuildtools.outputs.cache-hit != 'true'
      run: |
        choco install visualstudio2019buildtools --version=16.11.5.0 -y --no-progress
        Start-Process "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" -ArgumentList "modify", "--quiet", "--wait", "--installPath", "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools", "--add", "Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools", "--add", "Microsoft.VisualStudio.Workload.NetCoreBuildTools" -NoNewWindow -Wait

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3

    - name: Build Solution in Release Configuration
      run: |
        msbuild.exe source/Unity-API/UnityOrbisBridge.sln /nologo /nr:false /p:Configuration=Release /p:DeployOnBuild=true /p:DeployDefaultTarget=Build /p:platform="Any CPU" /p:TargetFrameworkVersion="v3.5" -m

    - name: Check Build Output
      run: |
        echo "Checking for DLL in the build folder"
        dir source/Unity-API/bin/Release

    - name: Upload DLL as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: UnityOrbisBridge-DLL
        path: source/Unity-API/UnityOrbisBridge.dll

  upload-artifacts:
    needs: [build-prx, build-dll]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download PRX Artifact
      uses: actions/download-artifact@v4
      with:
        name: UnityOrbisBridge-PRX
        path: artifacts

    - name: Download DLL Artifact
      uses: actions/download-artifact@v4
      with:
        name: UnityOrbisBridge-DLL
        path: artifacts

    - name: Ensure Target Directories Exist
      run: |
        mkdir -p source/plugin source/Unity-API

    - name: Move Artifacts to Target Paths
      run: |
        mv artifacts/UnityOrbisBridge.prx source/plugin/ || echo "PRX file not found!"
        mv artifacts/UnityOrbisBridge.dll source/Unity-API/ || echo "DLL file not found!"

    - name: Commit & Push Compiled Binaries
      run: |
        git config user.name "GitHub Actions"
        git config user.email "github-actions@github.com"
        git add source/plugin/UnityOrbisBridge.prx source/Unity-API/UnityOrbisBridge.dll
        git commit -m "Final commit for UnityOrbisBridge build artifacts" || echo "No changes to commit"
        git push origin $GITHUB_REF

    - name: Create Archive
      run: |
        echo "Creating archive for UnityOrbisBridge..."
        mkdir -p UnityOrbisBridge
        cp source/plugin/UnityOrbisBridge.prx UnityOrbisBridge/
        cp source/Unity-API/UnityOrbisBridge.dll UnityOrbisBridge/
        zip -r UnityOrbisBridge.zip UnityOrbisBridge
        rm -rf UnityOrbisBridge

    - name: Upload Combined Artifact
      uses: actions/upload-artifact@v4
      with:
        name: UnityOrbisBridge
        path: UnityOrbisBridge.zip
